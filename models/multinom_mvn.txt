  #  Basic multinomial describing how white the population is by time
	# random effects on camera w/ multinomial normal distribution
	# no fixed effects

    model{

      #Priors and constraints
      for(i in 1:(nbins - 1)){
        alpha[i] ~ dnorm(0, 0.001)
      }

      for(i in 1:(nbins - 1)){
        beta[i] ~ dnorm(0, 0.001)
      }

      #  Random effects as mvnormal
      # V: diagonal matrix
      V[1,1] <- 1
      V[2,2] <- 1
      V[1,2] <- 0
      V[2,1] <- 0

      # prior on precision matrix with 3 degree of freedom
      omega[1:2, 1:2] ~ dwish(V[ , ], 3)

      # Covariance matrix
      sigma2[1:2, 1:2] <- inverse(omega[,])

      # Conditional standard deviation
      sigma[1] <- sqrt(sigma2[1, 1])	# SD of category 1
      sigma[2] <- sqrt(sigma2[2, 2])	# SD of category 2

      # Conditional correlation
      rho <- sigma2[1, 2]/(sigma[1] * sigma[2])

      #  Prior on camera mean
      cat_mu[1] <- 0
      cat_mu[2] <- 0

      #  Draw effect of camera for each category admitting they are correlated
      for(c in 1:ncam){
        cam_eff[1:2, c] ~ dmnorm(cat_mu[], omega[1:2,1:2])
      }

      for(c in 1:ncam){
        for(d in 1:ndays){
          log(p_exp[1,c,d]) <- alpha[1] +
            beta[1] * d +
            cam_eff[1,c]

          log(p_exp[2,c,d]) <- alpha[2] +
            beta[2] * d +
            cam_eff[2,c]

          log(p_exp[3,c,d]) <- 0

          p_sum[c,d] <- sum(p_exp[,c,d])

          p_rand[1,c,d] <- p_exp[1,c,d]/p_sum[c,d]
          p_rand[2,c,d] <- p_exp[2,c,d]/p_sum[c,d]
          p_rand[3,c,d] <- p_exp[3,c,d]/p_sum[c,d]
        }
      }

      for(i in 1:nobs){
        y[i] ~ dcat(p_rand[,cam[i],day[i]])
      }


      #  Derived to strip off random camera effect
      for(d in 1:ndays){
        log(pp_exp[1,d]) <- alpha[1] +
          beta[1] * d
        log(pp_exp[2,d]) <- alpha[2] +
          beta[2] * d
        log(pp_exp[3,d]) <- 0

        pp_sum[d] <- sum(pp_exp[,d])

        pp[1,d] <- pp_exp[1,d]/pp_sum[d]
        pp[2,d] <- pp_exp[2,d]/pp_sum[d]
        pp[3,d] <- pp_exp[3,d]/pp_sum[d]
      }
    }
